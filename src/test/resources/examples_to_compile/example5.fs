( func modulo ( a b ) ( minus a ( times ( divide a b ) b ) ) )

( func sequence ( v q n ) (
    ( setq m ( plus n 1 ) )
    ( cond ( equal v 0 )
        ( cond ( greater m q )
            ( return 1 )
            ( return 0 ) )
        ( cond ( equal v 1 )
            ( return 0 ) )
    )
    ( setq nextval (divide v 2) )
    ( cond ( equal ( modulo v 2 ) 0 )
        ( cond ( greater m q )
              ( return 1 )
              ( return ( sequence nextval q m ) ) )
        ( return ( sequence nextval q 0 ) )
    )
  )
)

( func palindrom ( v ) (
    ( cond ( equal v 0 ) ( return 0 ) )
    ( setq acc 0 )
    ( setq rest v )
    ( while ( less acc rest ) (
        ( setq acc ( plus ( times acc 10 )
                          ( modulo rest 10 ) ) )
        ( setq rest ( divide rest 10) )
      )
    )
    ( cond ( or ( equal acc rest )
                ( equal ( divide acc 10 ) rest ) )
        ( return 1 )
        ( return 0 ) )
  )
)

( prog (
    ( setq command ( read 0 ) )
    ( setq res 0 )
    ( cond ( equal command 0)
        ( setq res ( sequence ( read 1 ) ( read 2 ) 0 ) )
        ( cond ( equal command 1)
            ( setq res ( palindrom ( read 1 ) ) )
        )
    )
    ( return res )
  )
)